{"ast":null,"code":"import React, { useEffect, useState, useRef } from 'react';\nimport '../styles/AnimatedCheckmark.css'; // EXPORTED MODES READY TO USE\n\nvar MODES = {\n  LOADING: 'loading',\n  SUCCESS: 'success'\n};\n/*\n * ANIMATED CHECKMARK COMPONENT\n *\n * Displays an animated checkmark that has multiple modes\n *\n * @param - {MODE} mode - Decides what the checkmarks are showing\n * @param - {Number} size - Regulates the size of the component\n * @param - {Boolean} breathingEllipsis - If true the ellipsis will contract and expand infinitely\n * @param - {Number} collapseFactor - Value between 0 and 1, decides how far the ellipsis collapse\n * @param - {String} successColor - Defines what color is shown when mode equals MODES.SUCCESS\n * @param - {String} baseColor - Defines what base color is shown\n *\n */\n\nvar AnimatedCheckmark = function AnimatedCheckmark(_ref) {\n  var _ref$mode = _ref.mode,\n    mode = _ref$mode === void 0 ? MODES.LOADING : _ref$mode,\n    _ref$size = _ref.size,\n    size = _ref$size === void 0 ? 128 : _ref$size,\n    _ref$breathingEllipsi = _ref.breathingEllipsis,\n    breathingEllipsis = _ref$breathingEllipsi === void 0 ? true : _ref$breathingEllipsi,\n    _ref$collapseFactor = _ref.collapseFactor,\n    collapseFactor = _ref$collapseFactor === void 0 ? 1 : _ref$collapseFactor,\n    _ref$successColor = _ref.successColor,\n    successColor = _ref$successColor === void 0 ? 'limegreen' : _ref$successColor,\n    _ref$baseColor = _ref.baseColor,\n    baseColor = _ref$baseColor === void 0 ? 'gray' : _ref$baseColor;\n  var maxRadius = 116;\n  var maxCollapse = maxRadius - maxRadius * (collapseFactor * 0.33);\n  var _useState = useState(maxRadius),\n    newRx = _useState[0],\n    setNewRx = _useState[1];\n  var _useState2 = useState(true),\n    block = _useState2[0],\n    setBlock = _useState2[1];\n  var _useState3 = useState('decrease'),\n    animationMode = _useState3[0],\n    setAnimationMode = _useState3[1];\n  var _useState4 = useState(40),\n    animationSpeed = _useState4[0],\n    setAnimationSpeed = _useState4[1];\n  var isAnimated = mode === MODES.LOADING && (breathingEllipsis || newRx > maxCollapse) || mode === MODES.SUCCESS && newRx > maxCollapse; // When called decides whether to increase the x-Radius of ellipsis\n\n  var initAnimation = function initAnimation() {\n    if (animationMode === 'increase') {\n      if (newRx < maxRadius) {\n        setNewRx(newRx + 1);\n      } else {\n        setAnimationMode('decrease');\n        setNewRx(newRx - 1);\n      }\n    } else {\n      if (newRx > maxCollapse) {\n        setNewRx(newRx - 1);\n      } else {\n        setAnimationMode('increase');\n        setNewRx(newRx + 1);\n      }\n    }\n  }; // Block animation on mount to let ellipsis initialize (animation-delay)\n\n  useEffect(function () {\n    setTimeout(function () {\n      setBlock(false);\n    }, 300);\n  }, []); // Loop animation while conditions are met\n\n  useEffect(function () {\n    setTimeout(function () {\n      if (!block && isAnimated) {\n        if (mode === MODES.SUCCESS) {\n          setAnimationMode('decrease');\n          setAnimationSpeed(10);\n        }\n        initAnimation();\n      }\n    }, animationSpeed);\n  }, [newRx, block]); // Make sure animation is running when mode switches\n\n  useEffect(function () {\n    if (!block && isAnimated) {\n      if (animationSpeed !== 40) setAnimationSpeed(40);\n      initAnimation();\n    }\n  }, [mode]);\n  var rotateString = 'rotate';\n  var color = mode === MODES.SUCCESS ? successColor : baseColor;\n  var containerStyle = {\n    width: size,\n    height: size\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: containerStyle,\n    className: \"checkMarkContainer\"\n  }, /*#__PURE__*/React.createElement(\"svg\", {\n    viewBox: \"0 0 256 256\"\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    stroke: color,\n    fill: \"none\",\n    strokeWidth: \"6\"\n  }, /*#__PURE__*/React.createElement(\"circle\", {\n    cx: \"128\",\n    cy: \"128\",\n    r: maxRadius\n  }), /*#__PURE__*/React.createElement(\"ellipse\", {\n    className: rotateString + \" e1\",\n    cx: \"128\",\n    cy: \"128\",\n    rx: newRx,\n    ry: maxRadius\n  }), /*#__PURE__*/React.createElement(\"ellipse\", {\n    className: rotateString + \" e2\",\n    cx: \"128\",\n    cy: \"128\",\n    rx: newRx,\n    ry: maxRadius\n  }), /*#__PURE__*/React.createElement(\"ellipse\", {\n    className: rotateString + \" e3\",\n    cx: \"128\",\n    cy: \"128\",\n    rx: newRx,\n    ry: maxRadius\n  }), /*#__PURE__*/React.createElement(\"ellipse\", {\n    className: rotateString + \" e4\",\n    cx: \"128\",\n    cy: \"128\",\n    rx: newRx,\n    ry: maxRadius\n  })), /*#__PURE__*/React.createElement(\"g\", {\n    stroke: color,\n    fill: \"none\",\n    strokeWidth: \"8\"\n  }, mode === MODES.SUCCESS && newRx < maxCollapse && /*#__PURE__*/React.createElement(\"path\", {\n    className: \"icon\",\n    d: \"M 75 130 L 110 170 L 175 90\"\n  }))));\n};\nexport { AnimatedCheckmark, MODES };","map":{"version":3,"names":["React","useEffect","useState","useRef","MODES","LOADING","SUCCESS","AnimatedCheckmark","_ref","_ref$mode","mode","_ref$size","size","_ref$breathingEllipsi","breathingEllipsis","_ref$collapseFactor","collapseFactor","_ref$successColor","successColor","_ref$baseColor","baseColor","maxRadius","maxCollapse","_useState","newRx","setNewRx","_useState2","block","setBlock","_useState3","animationMode","setAnimationMode","_useState4","animationSpeed","setAnimationSpeed","isAnimated","initAnimation","setTimeout","rotateString","color","containerStyle","width","height","createElement","style","className","viewBox","stroke","fill","strokeWidth","cx","cy","r","rx","ry","d"],"sources":["/Users/youssefouzeroual/Desktop/LBD/LaFargeApp/e-learning-platform/client/node_modules/react-animated-checkmark/es/AnimatedCheckmark/AnimatedCheckmark.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport '../styles/AnimatedCheckmark.css'; // EXPORTED MODES READY TO USE\n\nvar MODES = {\n  LOADING: 'loading',\n  SUCCESS: 'success'\n};\n/*\n * ANIMATED CHECKMARK COMPONENT\n *\n * Displays an animated checkmark that has multiple modes\n *\n * @param - {MODE} mode - Decides what the checkmarks are showing\n * @param - {Number} size - Regulates the size of the component\n * @param - {Boolean} breathingEllipsis - If true the ellipsis will contract and expand infinitely\n * @param - {Number} collapseFactor - Value between 0 and 1, decides how far the ellipsis collapse\n * @param - {String} successColor - Defines what color is shown when mode equals MODES.SUCCESS\n * @param - {String} baseColor - Defines what base color is shown\n *\n */\n\nvar AnimatedCheckmark = function AnimatedCheckmark(_ref) {\n  var _ref$mode = _ref.mode,\n      mode = _ref$mode === void 0 ? MODES.LOADING : _ref$mode,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 128 : _ref$size,\n      _ref$breathingEllipsi = _ref.breathingEllipsis,\n      breathingEllipsis = _ref$breathingEllipsi === void 0 ? true : _ref$breathingEllipsi,\n      _ref$collapseFactor = _ref.collapseFactor,\n      collapseFactor = _ref$collapseFactor === void 0 ? 1 : _ref$collapseFactor,\n      _ref$successColor = _ref.successColor,\n      successColor = _ref$successColor === void 0 ? 'limegreen' : _ref$successColor,\n      _ref$baseColor = _ref.baseColor,\n      baseColor = _ref$baseColor === void 0 ? 'gray' : _ref$baseColor;\n  var maxRadius = 116;\n  var maxCollapse = maxRadius - maxRadius * (collapseFactor * 0.33);\n\n  var _useState = useState(maxRadius),\n      newRx = _useState[0],\n      setNewRx = _useState[1];\n\n  var _useState2 = useState(true),\n      block = _useState2[0],\n      setBlock = _useState2[1];\n\n  var _useState3 = useState('decrease'),\n      animationMode = _useState3[0],\n      setAnimationMode = _useState3[1];\n\n  var _useState4 = useState(40),\n      animationSpeed = _useState4[0],\n      setAnimationSpeed = _useState4[1];\n\n  var isAnimated = mode === MODES.LOADING && (breathingEllipsis || newRx > maxCollapse) || mode === MODES.SUCCESS && newRx > maxCollapse; // When called decides whether to increase the x-Radius of ellipsis\n\n  var initAnimation = function initAnimation() {\n    if (animationMode === 'increase') {\n      if (newRx < maxRadius) {\n        setNewRx(newRx + 1);\n      } else {\n        setAnimationMode('decrease');\n        setNewRx(newRx - 1);\n      }\n    } else {\n      if (newRx > maxCollapse) {\n        setNewRx(newRx - 1);\n      } else {\n        setAnimationMode('increase');\n        setNewRx(newRx + 1);\n      }\n    }\n  }; // Block animation on mount to let ellipsis initialize (animation-delay)\n\n\n  useEffect(function () {\n    setTimeout(function () {\n      setBlock(false);\n    }, 300);\n  }, []); // Loop animation while conditions are met\n\n  useEffect(function () {\n    setTimeout(function () {\n      if (!block && isAnimated) {\n        if (mode === MODES.SUCCESS) {\n          setAnimationMode('decrease');\n          setAnimationSpeed(10);\n        }\n\n        initAnimation();\n      }\n    }, animationSpeed);\n  }, [newRx, block]); // Make sure animation is running when mode switches\n\n  useEffect(function () {\n    if (!block && isAnimated) {\n      if (animationSpeed !== 40) setAnimationSpeed(40);\n      initAnimation();\n    }\n  }, [mode]);\n  var rotateString = 'rotate';\n  var color = mode === MODES.SUCCESS ? successColor : baseColor;\n  var containerStyle = {\n    width: size,\n    height: size\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: containerStyle,\n    className: \"checkMarkContainer\"\n  }, /*#__PURE__*/React.createElement(\"svg\", {\n    viewBox: \"0 0 256 256\"\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    stroke: color,\n    fill: \"none\",\n    strokeWidth: \"6\"\n  }, /*#__PURE__*/React.createElement(\"circle\", {\n    cx: \"128\",\n    cy: \"128\",\n    r: maxRadius\n  }), /*#__PURE__*/React.createElement(\"ellipse\", {\n    className: rotateString + \" e1\",\n    cx: \"128\",\n    cy: \"128\",\n    rx: newRx,\n    ry: maxRadius\n  }), /*#__PURE__*/React.createElement(\"ellipse\", {\n    className: rotateString + \" e2\",\n    cx: \"128\",\n    cy: \"128\",\n    rx: newRx,\n    ry: maxRadius\n  }), /*#__PURE__*/React.createElement(\"ellipse\", {\n    className: rotateString + \" e3\",\n    cx: \"128\",\n    cy: \"128\",\n    rx: newRx,\n    ry: maxRadius\n  }), /*#__PURE__*/React.createElement(\"ellipse\", {\n    className: rotateString + \" e4\",\n    cx: \"128\",\n    cy: \"128\",\n    rx: newRx,\n    ry: maxRadius\n  })), /*#__PURE__*/React.createElement(\"g\", {\n    stroke: color,\n    fill: \"none\",\n    strokeWidth: \"8\"\n  }, mode === MODES.SUCCESS && newRx < maxCollapse && /*#__PURE__*/React.createElement(\"path\", {\n    className: \"icon\",\n    d: \"M 75 130 L 110 170 L 175 90\"\n  }))));\n};\n\nexport { AnimatedCheckmark, MODES };"],"mappings":"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"},"metadata":{},"sourceType":"module"}